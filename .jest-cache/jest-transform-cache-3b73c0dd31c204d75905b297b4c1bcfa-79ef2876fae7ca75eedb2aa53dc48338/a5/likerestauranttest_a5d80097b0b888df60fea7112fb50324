975d5d8957652277f4ff1dcfbdb398be
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _favoriteRestaurantIdb = _interopRequireDefault(require("../../src/scripts/Data/favorite-restaurant-idb"));
var TestFactories = _interopRequireWildcard(require("./helpers/test-factories"));
require("fake-indexeddb/lib/FakeIndexedDB");
var _globals = require("@jest/globals");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; } // tests/integration/like-restaurant.test.js
(0, _globals.describe)('Liking A Restaurant - Comprehensive Test Suite', function () {
  // Setup dan cleanup untuk setiap test
  var addLikeButtonContainer = function addLikeButtonContainer() {
    document.body.innerHTML = '<div id="likeButtonContainer"></div>';
  };
  beforeEach(function () {
    addLikeButtonContainer();
  });
  afterEach(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return _favoriteRestaurantIdb["default"].deleteAll();
        case 2:
        case "end":
          return _context.stop();
      }
    }, _callee);
  })));

  // Kasus Positif - Fitur Dasar
  (0, _globals.describe)('Basic Liking Functionality', function () {
    (0, _globals.it)('should be able to like a restaurant with complete information', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
      var restaurant, savedRestaurant;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            restaurant = {
              id: 1,
              name: 'Test Restaurant',
              city: 'Test City',
              rating: 4.5
            };
            _context2.next = 3;
            return TestFactories.createLikeButtonPresenterWithRestaurant(restaurant);
          case 3:
            document.querySelector('#likeButton').dispatchEvent(new Event('click'));
            _context2.next = 6;
            return _favoriteRestaurantIdb["default"].getRestaurant(1);
          case 6:
            savedRestaurant = _context2.sent;
            (0, _globals.expect)(savedRestaurant).toEqual(restaurant);
          case 8:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    })));
    (0, _globals.it)('should increase favorite restaurants count after liking', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
      var favoriteRestaurants;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return TestFactories.createLikeButtonPresenterWithRestaurant({
              id: 1
            });
          case 2:
            document.querySelector('#likeButton').dispatchEvent(new Event('click'));
            _context3.next = 5;
            return _favoriteRestaurantIdb["default"].getAllRestaurants();
          case 5:
            favoriteRestaurants = _context3.sent;
            (0, _globals.expect)(favoriteRestaurants.length).toBe(1);
          case 7:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    })));
  });

  // Kasus Negatif - Validasi Input
  (0, _globals.describe)('Negative Scenarios for Liking', function () {
    (0, _globals.it)('should not add restaurant without id', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
      var favoriteRestaurants;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return TestFactories.createLikeButtonPresenterWithRestaurant({});
          case 2:
            document.querySelector('#likeButton').dispatchEvent(new Event('click'));
            _context4.next = 5;
            return _favoriteRestaurantIdb["default"].getAllRestaurants();
          case 5:
            favoriteRestaurants = _context4.sent;
            (0, _globals.expect)(favoriteRestaurants.length).toBe(0);
          case 7:
          case "end":
            return _context4.stop();
        }
      }, _callee4);
    })));
    (0, _globals.it)('should not allow duplicate likes', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
      var restaurant, favoriteRestaurants;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            restaurant = {
              id: 1,
              name: 'Test Restaurant'
            };
            _context5.next = 3;
            return TestFactories.createLikeButtonPresenterWithRestaurant(restaurant);
          case 3:
            // Like pertama
            document.querySelector('#likeButton').dispatchEvent(new Event('click'));

            // Reset container
            addLikeButtonContainer();
            _context5.next = 7;
            return TestFactories.createLikeButtonPresenterWithRestaurant(restaurant);
          case 7:
            // Like kedua
            document.querySelector('#likeButton').dispatchEvent(new Event('click'));
            _context5.next = 10;
            return _favoriteRestaurantIdb["default"].getAllRestaurants();
          case 10:
            favoriteRestaurants = _context5.sent;
            (0, _globals.expect)(favoriteRestaurants.length).toBe(1);
          case 12:
          case "end":
            return _context5.stop();
        }
      }, _callee5);
    })));
  });

  // Kasus Edge Case
  (0, _globals.describe)('Edge Case Scenarios', function () {
    (0, _globals.it)('should handle liking a restaurant with minimal information', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
      var restaurant, savedRestaurant;
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            restaurant = {
              id: 1
            };
            _context6.next = 3;
            return TestFactories.createLikeButtonPresenterWithRestaurant(restaurant);
          case 3:
            document.querySelector('#likeButton').dispatchEvent(new Event('click'));
            _context6.next = 6;
            return _favoriteRestaurantIdb["default"].getRestaurant(1);
          case 6:
            savedRestaurant = _context6.sent;
            (0, _globals.expect)(savedRestaurant).toEqual(restaurant);
          case 8:
          case "end":
            return _context6.stop();
        }
      }, _callee6);
    })));
    (0, _globals.it)('should not break when trying to like an already deleted restaurant', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
      var restaurant, favoriteRestaurants;
      return _regeneratorRuntime().wrap(function _callee7$(_context7) {
        while (1) switch (_context7.prev = _context7.next) {
          case 0:
            restaurant = {
              id: 1
            }; // Simulasi restoran sudah dihapus
            _context7.next = 3;
            return _favoriteRestaurantIdb["default"].deleteRestaurant(1);
          case 3:
            _context7.next = 5;
            return TestFactories.createLikeButtonPresenterWithRestaurant(restaurant);
          case 5:
            document.querySelector('#likeButton').dispatchEvent(new Event('click'));
            _context7.next = 8;
            return _favoriteRestaurantIdb["default"].getAllRestaurants();
          case 8:
            favoriteRestaurants = _context7.sent;
            (0, _globals.expect)(favoriteRestaurants.length).toBe(1);
          case 10:
          case "end":
            return _context7.stop();
        }
      }, _callee7);
    })));
  });

  // Validasi UI dan Interaksi
  (0, _globals.describe)('UI Interaction Validation', function () {
    (0, _globals.it)('should change like button state after clicking', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
      var likeButton;
      return _regeneratorRuntime().wrap(function _callee8$(_context8) {
        while (1) switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return TestFactories.createLikeButtonPresenterWithRestaurant({
              id: 1
            });
          case 2:
            likeButton = document.querySelector('#likeButton');
            likeButton.dispatchEvent(new Event('click'));
            (0, _globals.expect)(likeButton.getAttribute('aria-label')).toBe('unlike this restaurant');
          case 5:
          case "end":
            return _context8.stop();
        }
      }, _callee8);
    })));
    (0, _globals.it)('should show correct UI state for liked restaurant', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
      var restaurant, likedIndicator;
      return _regeneratorRuntime().wrap(function _callee9$(_context9) {
        while (1) switch (_context9.prev = _context9.next) {
          case 0:
            restaurant = {
              id: 1,
              name: 'Test Restaurant'
            };
            _context9.next = 3;
            return TestFactories.createLikeButtonPresenterWithRestaurant(restaurant);
          case 3:
            // Simulate like
            document.querySelector('#likeButton').dispatchEvent(new Event('click'));

            // Check UI elements or classes that indicate liked state
            likedIndicator = document.querySelector('.liked-restaurant-indicator');
            (0, _globals.expect)(likedIndicator).toBeTruthy();
          case 6:
          case "end":
            return _context9.stop();
        }
      }, _callee9);
    })));
  });

  // Performance dan Keamanan
  (0, _globals.describe)('Performance and Security Checks', function () {
    (0, _globals.it)('should handle multiple rapid like/unlike actions', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
      var restaurant, i, favoriteRestaurants;
      return _regeneratorRuntime().wrap(function _callee10$(_context10) {
        while (1) switch (_context10.prev = _context10.next) {
          case 0:
            restaurant = {
              id: 1
            };
            _context10.next = 3;
            return TestFactories.createLikeButtonPresenterWithRestaurant(restaurant);
          case 3:
            // Simulasi klik cepat
            for (i = 0; i < 5; i++) {
              document.querySelector('#likeButton').dispatchEvent(new Event('click'));
            }
            _context10.next = 6;
            return _favoriteRestaurantIdb["default"].getAllRestaurants();
          case 6:
            favoriteRestaurants = _context10.sent;
            (0, _globals.expect)(favoriteRestaurants.length).toBe(1);
          case 8:
          case "end":
            return _context10.stop();
        }
      }, _callee10);
    })));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmF2b3JpdGVSZXN0YXVyYW50SWRiIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJUZXN0RmFjdG9yaWVzIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfZ2xvYmFscyIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfX2VzTW9kdWxlIiwiX3R5cGVvZiIsImhhcyIsImdldCIsIm4iLCJfX3Byb3RvX18iLCJhIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJwcm90b3R5cGUiLCJvIiwidmFsdWUiLCJTeW1ib2wiLCJpdGVyYXRvciIsImMiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ3cmFwIiwiR2VuZXJhdG9yIiwiY3JlYXRlIiwiQ29udGV4dCIsIm1ha2VJbnZva2VNZXRob2QiLCJ0cnlDYXRjaCIsInR5cGUiLCJhcmciLCJoIiwibCIsImYiLCJzIiwieSIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJwIiwiZCIsImdldFByb3RvdHlwZU9mIiwidiIsInZhbHVlcyIsImciLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJmb3JFYWNoIiwiX2ludm9rZSIsIkFzeW5jSXRlcmF0b3IiLCJpbnZva2UiLCJyZXNvbHZlIiwiX19hd2FpdCIsInRoZW4iLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsIkVycm9yIiwiZG9uZSIsIm1ldGhvZCIsImRlbGVnYXRlIiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwiVHlwZUVycm9yIiwicmVzdWx0TmFtZSIsIm5leHQiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicHVzaCIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpc05hTiIsImxlbmd0aCIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImNvbnN0cnVjdG9yIiwibmFtZSIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsImF3cmFwIiwiYXN5bmMiLCJQcm9taXNlIiwia2V5cyIsInJldmVyc2UiLCJwb3AiLCJwcmV2IiwiY2hhckF0Iiwic2xpY2UiLCJzdG9wIiwicnZhbCIsImhhbmRsZSIsImNvbXBsZXRlIiwiZmluaXNoIiwiX2NhdGNoIiwiZGVsZWdhdGVZaWVsZCIsImFzeW5jR2VuZXJhdG9yU3RlcCIsIl9hc3luY1RvR2VuZXJhdG9yIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJfbmV4dCIsIl90aHJvdyIsImRlc2NyaWJlIiwiYWRkTGlrZUJ1dHRvbkNvbnRhaW5lciIsImRvY3VtZW50IiwiYm9keSIsImlubmVySFRNTCIsImJlZm9yZUVhY2giLCJhZnRlckVhY2giLCJfY2FsbGVlIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsIkZhdm9yaXRlUmVzdGF1cmFudElkYiIsImRlbGV0ZUFsbCIsIml0IiwiX2NhbGxlZTIiLCJyZXN0YXVyYW50Iiwic2F2ZWRSZXN0YXVyYW50IiwiX2NhbGxlZTIkIiwiX2NvbnRleHQyIiwiaWQiLCJjaXR5IiwicmF0aW5nIiwiY3JlYXRlTGlrZUJ1dHRvblByZXNlbnRlcldpdGhSZXN0YXVyYW50IiwicXVlcnlTZWxlY3RvciIsImRpc3BhdGNoRXZlbnQiLCJFdmVudCIsImdldFJlc3RhdXJhbnQiLCJleHBlY3QiLCJ0b0VxdWFsIiwiX2NhbGxlZTMiLCJmYXZvcml0ZVJlc3RhdXJhbnRzIiwiX2NhbGxlZTMkIiwiX2NvbnRleHQzIiwiZ2V0QWxsUmVzdGF1cmFudHMiLCJ0b0JlIiwiX2NhbGxlZTQiLCJfY2FsbGVlNCQiLCJfY29udGV4dDQiLCJfY2FsbGVlNSIsIl9jYWxsZWU1JCIsIl9jb250ZXh0NSIsIl9jYWxsZWU2IiwiX2NhbGxlZTYkIiwiX2NvbnRleHQ2IiwiX2NhbGxlZTciLCJfY2FsbGVlNyQiLCJfY29udGV4dDciLCJkZWxldGVSZXN0YXVyYW50IiwiX2NhbGxlZTgiLCJsaWtlQnV0dG9uIiwiX2NhbGxlZTgkIiwiX2NvbnRleHQ4IiwiZ2V0QXR0cmlidXRlIiwiX2NhbGxlZTkiLCJsaWtlZEluZGljYXRvciIsIl9jYWxsZWU5JCIsIl9jb250ZXh0OSIsInRvQmVUcnV0aHkiLCJfY2FsbGVlMTAiLCJfY2FsbGVlMTAkIiwiX2NvbnRleHQxMCJdLCJzb3VyY2VzIjpbImxpa2UtcmVzdGF1cmFudC50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHRlc3RzL2ludGVncmF0aW9uL2xpa2UtcmVzdGF1cmFudC50ZXN0LmpzXHJcbmltcG9ydCBGYXZvcml0ZVJlc3RhdXJhbnRJZGIgZnJvbSAnLi4vLi4vc3JjL3NjcmlwdHMvRGF0YS9mYXZvcml0ZS1yZXN0YXVyYW50LWlkYic7XHJcbmltcG9ydCAqIGFzIFRlc3RGYWN0b3JpZXMgZnJvbSAnLi9oZWxwZXJzL3Rlc3QtZmFjdG9yaWVzJztcclxuaW1wb3J0ICdmYWtlLWluZGV4ZWRkYi9saWIvRmFrZUluZGV4ZWREQic7XHJcbmltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0IH0gZnJvbSAnQGplc3QvZ2xvYmFscyc7XHJcblxyXG5cclxuZGVzY3JpYmUoJ0xpa2luZyBBIFJlc3RhdXJhbnQgLSBDb21wcmVoZW5zaXZlIFRlc3QgU3VpdGUnLCAoKSA9PiB7XHJcbiAgLy8gU2V0dXAgZGFuIGNsZWFudXAgdW50dWsgc2V0aWFwIHRlc3RcclxuICBjb25zdCBhZGRMaWtlQnV0dG9uQ29udGFpbmVyID0gKCkgPT4ge1xyXG4gICAgZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSAnPGRpdiBpZD1cImxpa2VCdXR0b25Db250YWluZXJcIj48L2Rpdj4nO1xyXG4gIH07XHJcblxyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgYWRkTGlrZUJ1dHRvbkNvbnRhaW5lcigpO1xyXG4gIH0pO1xyXG5cclxuICBhZnRlckVhY2goYXN5bmMgKCkgPT4ge1xyXG4gICAgYXdhaXQgRmF2b3JpdGVSZXN0YXVyYW50SWRiLmRlbGV0ZUFsbCgpO1xyXG4gIH0pO1xyXG5cclxuICAvLyBLYXN1cyBQb3NpdGlmIC0gRml0dXIgRGFzYXJcclxuICBkZXNjcmliZSgnQmFzaWMgTGlraW5nIEZ1bmN0aW9uYWxpdHknLCAoKSA9PiB7XHJcbiAgICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gbGlrZSBhIHJlc3RhdXJhbnQgd2l0aCBjb21wbGV0ZSBpbmZvcm1hdGlvbicsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgcmVzdGF1cmFudCA9IHtcclxuICAgICAgICBpZDogMSxcclxuICAgICAgICBuYW1lOiAnVGVzdCBSZXN0YXVyYW50JyxcclxuICAgICAgICBjaXR5OiAnVGVzdCBDaXR5JyxcclxuICAgICAgICByYXRpbmc6IDQuNSxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGF3YWl0IFRlc3RGYWN0b3JpZXMuY3JlYXRlTGlrZUJ1dHRvblByZXNlbnRlcldpdGhSZXN0YXVyYW50KHJlc3RhdXJhbnQpO1xyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbGlrZUJ1dHRvbicpLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdjbGljaycpKTtcclxuXHJcbiAgICAgIGNvbnN0IHNhdmVkUmVzdGF1cmFudCA9IGF3YWl0IEZhdm9yaXRlUmVzdGF1cmFudElkYi5nZXRSZXN0YXVyYW50KDEpO1xyXG4gICAgICBleHBlY3Qoc2F2ZWRSZXN0YXVyYW50KS50b0VxdWFsKHJlc3RhdXJhbnQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBpbmNyZWFzZSBmYXZvcml0ZSByZXN0YXVyYW50cyBjb3VudCBhZnRlciBsaWtpbmcnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGF3YWl0IFRlc3RGYWN0b3JpZXMuY3JlYXRlTGlrZUJ1dHRvblByZXNlbnRlcldpdGhSZXN0YXVyYW50KHsgaWQ6IDEgfSk7XHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsaWtlQnV0dG9uJykuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NsaWNrJykpO1xyXG5cclxuICAgICAgY29uc3QgZmF2b3JpdGVSZXN0YXVyYW50cyA9IGF3YWl0IEZhdm9yaXRlUmVzdGF1cmFudElkYi5nZXRBbGxSZXN0YXVyYW50cygpO1xyXG4gICAgICBleHBlY3QoZmF2b3JpdGVSZXN0YXVyYW50cy5sZW5ndGgpLnRvQmUoMSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgLy8gS2FzdXMgTmVnYXRpZiAtIFZhbGlkYXNpIElucHV0XHJcbiAgZGVzY3JpYmUoJ05lZ2F0aXZlIFNjZW5hcmlvcyBmb3IgTGlraW5nJywgKCkgPT4ge1xyXG4gICAgaXQoJ3Nob3VsZCBub3QgYWRkIHJlc3RhdXJhbnQgd2l0aG91dCBpZCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgYXdhaXQgVGVzdEZhY3Rvcmllcy5jcmVhdGVMaWtlQnV0dG9uUHJlc2VudGVyV2l0aFJlc3RhdXJhbnQoe30pO1xyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbGlrZUJ1dHRvbicpLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdjbGljaycpKTtcclxuXHJcbiAgICAgIGNvbnN0IGZhdm9yaXRlUmVzdGF1cmFudHMgPSBhd2FpdCBGYXZvcml0ZVJlc3RhdXJhbnRJZGIuZ2V0QWxsUmVzdGF1cmFudHMoKTtcclxuICAgICAgZXhwZWN0KGZhdm9yaXRlUmVzdGF1cmFudHMubGVuZ3RoKS50b0JlKDApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBub3QgYWxsb3cgZHVwbGljYXRlIGxpa2VzJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCByZXN0YXVyYW50ID0geyBpZDogMSwgbmFtZTogJ1Rlc3QgUmVzdGF1cmFudCcgfTtcclxuICAgICAgXHJcbiAgICAgIGF3YWl0IFRlc3RGYWN0b3JpZXMuY3JlYXRlTGlrZUJ1dHRvblByZXNlbnRlcldpdGhSZXN0YXVyYW50KHJlc3RhdXJhbnQpO1xyXG4gICAgICBcclxuICAgICAgLy8gTGlrZSBwZXJ0YW1hXHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsaWtlQnV0dG9uJykuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NsaWNrJykpO1xyXG4gICAgICBcclxuICAgICAgLy8gUmVzZXQgY29udGFpbmVyXHJcbiAgICAgIGFkZExpa2VCdXR0b25Db250YWluZXIoKTtcclxuICAgICAgYXdhaXQgVGVzdEZhY3Rvcmllcy5jcmVhdGVMaWtlQnV0dG9uUHJlc2VudGVyV2l0aFJlc3RhdXJhbnQocmVzdGF1cmFudCk7XHJcbiAgICAgIFxyXG4gICAgICAvLyBMaWtlIGtlZHVhXHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsaWtlQnV0dG9uJykuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NsaWNrJykpO1xyXG5cclxuICAgICAgY29uc3QgZmF2b3JpdGVSZXN0YXVyYW50cyA9IGF3YWl0IEZhdm9yaXRlUmVzdGF1cmFudElkYi5nZXRBbGxSZXN0YXVyYW50cygpO1xyXG4gICAgICBleHBlY3QoZmF2b3JpdGVSZXN0YXVyYW50cy5sZW5ndGgpLnRvQmUoMSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgLy8gS2FzdXMgRWRnZSBDYXNlXHJcbiAgZGVzY3JpYmUoJ0VkZ2UgQ2FzZSBTY2VuYXJpb3MnLCAoKSA9PiB7XHJcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBsaWtpbmcgYSByZXN0YXVyYW50IHdpdGggbWluaW1hbCBpbmZvcm1hdGlvbicsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgcmVzdGF1cmFudCA9IHsgaWQ6IDEgfTtcclxuICAgICAgYXdhaXQgVGVzdEZhY3Rvcmllcy5jcmVhdGVMaWtlQnV0dG9uUHJlc2VudGVyV2l0aFJlc3RhdXJhbnQocmVzdGF1cmFudCk7XHJcbiAgICAgIFxyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbGlrZUJ1dHRvbicpLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdjbGljaycpKTtcclxuICAgICAgY29uc3Qgc2F2ZWRSZXN0YXVyYW50ID0gYXdhaXQgRmF2b3JpdGVSZXN0YXVyYW50SWRiLmdldFJlc3RhdXJhbnQoMSk7XHJcbiAgICAgIFxyXG4gICAgICBleHBlY3Qoc2F2ZWRSZXN0YXVyYW50KS50b0VxdWFsKHJlc3RhdXJhbnQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3Nob3VsZCBub3QgYnJlYWsgd2hlbiB0cnlpbmcgdG8gbGlrZSBhbiBhbHJlYWR5IGRlbGV0ZWQgcmVzdGF1cmFudCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgcmVzdGF1cmFudCA9IHsgaWQ6IDEgfTtcclxuICAgICAgXHJcbiAgICAgIC8vIFNpbXVsYXNpIHJlc3RvcmFuIHN1ZGFoIGRpaGFwdXNcclxuICAgICAgYXdhaXQgRmF2b3JpdGVSZXN0YXVyYW50SWRiLmRlbGV0ZVJlc3RhdXJhbnQoMSk7XHJcbiAgICAgIFxyXG4gICAgICBhd2FpdCBUZXN0RmFjdG9yaWVzLmNyZWF0ZUxpa2VCdXR0b25QcmVzZW50ZXJXaXRoUmVzdGF1cmFudChyZXN0YXVyYW50KTtcclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xpa2VCdXR0b24nKS5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnY2xpY2snKSk7XHJcblxyXG4gICAgICBjb25zdCBmYXZvcml0ZVJlc3RhdXJhbnRzID0gYXdhaXQgRmF2b3JpdGVSZXN0YXVyYW50SWRiLmdldEFsbFJlc3RhdXJhbnRzKCk7XHJcbiAgICAgIGV4cGVjdChmYXZvcml0ZVJlc3RhdXJhbnRzLmxlbmd0aCkudG9CZSgxKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICAvLyBWYWxpZGFzaSBVSSBkYW4gSW50ZXJha3NpXHJcbiAgZGVzY3JpYmUoJ1VJIEludGVyYWN0aW9uIFZhbGlkYXRpb24nLCAoKSA9PiB7XHJcbiAgICBpdCgnc2hvdWxkIGNoYW5nZSBsaWtlIGJ1dHRvbiBzdGF0ZSBhZnRlciBjbGlja2luZycsIGFzeW5jICgpID0+IHtcclxuICAgICAgYXdhaXQgVGVzdEZhY3Rvcmllcy5jcmVhdGVMaWtlQnV0dG9uUHJlc2VudGVyV2l0aFJlc3RhdXJhbnQoeyBpZDogMSB9KTtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IGxpa2VCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbGlrZUJ1dHRvbicpO1xyXG4gICAgICBsaWtlQnV0dG9uLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdjbGljaycpKTtcclxuXHJcbiAgICAgIGV4cGVjdChsaWtlQnV0dG9uLmdldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpKS50b0JlKCd1bmxpa2UgdGhpcyByZXN0YXVyYW50Jyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2hvdWxkIHNob3cgY29ycmVjdCBVSSBzdGF0ZSBmb3IgbGlrZWQgcmVzdGF1cmFudCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgcmVzdGF1cmFudCA9IHsgaWQ6IDEsIG5hbWU6ICdUZXN0IFJlc3RhdXJhbnQnIH07XHJcbiAgICAgIGF3YWl0IFRlc3RGYWN0b3JpZXMuY3JlYXRlTGlrZUJ1dHRvblByZXNlbnRlcldpdGhSZXN0YXVyYW50KHJlc3RhdXJhbnQpO1xyXG4gICAgICBcclxuICAgICAgLy8gU2ltdWxhdGUgbGlrZVxyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbGlrZUJ1dHRvbicpLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdjbGljaycpKTtcclxuXHJcbiAgICAgIC8vIENoZWNrIFVJIGVsZW1lbnRzIG9yIGNsYXNzZXMgdGhhdCBpbmRpY2F0ZSBsaWtlZCBzdGF0ZVxyXG4gICAgICBjb25zdCBsaWtlZEluZGljYXRvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5saWtlZC1yZXN0YXVyYW50LWluZGljYXRvcicpO1xyXG4gICAgICBleHBlY3QobGlrZWRJbmRpY2F0b3IpLnRvQmVUcnV0aHkoKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICAvLyBQZXJmb3JtYW5jZSBkYW4gS2VhbWFuYW5cclxuICBkZXNjcmliZSgnUGVyZm9ybWFuY2UgYW5kIFNlY3VyaXR5IENoZWNrcycsICgpID0+IHtcclxuICAgIGl0KCdzaG91bGQgaGFuZGxlIG11bHRpcGxlIHJhcGlkIGxpa2UvdW5saWtlIGFjdGlvbnMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlc3RhdXJhbnQgPSB7IGlkOiAxIH07XHJcbiAgICAgIFxyXG4gICAgICBhd2FpdCBUZXN0RmFjdG9yaWVzLmNyZWF0ZUxpa2VCdXR0b25QcmVzZW50ZXJXaXRoUmVzdGF1cmFudChyZXN0YXVyYW50KTtcclxuICAgICAgXHJcbiAgICAgIC8vIFNpbXVsYXNpIGtsaWsgY2VwYXRcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpKyspIHtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbGlrZUJ1dHRvbicpLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdjbGljaycpKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgZmF2b3JpdGVSZXN0YXVyYW50cyA9IGF3YWl0IEZhdm9yaXRlUmVzdGF1cmFudElkYi5nZXRBbGxSZXN0YXVyYW50cygpO1xyXG4gICAgICBleHBlY3QoZmF2b3JpdGVSZXN0YXVyYW50cy5sZW5ndGgpLnRvQmUoMSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7Il0sIm1hcHBpbmdzIjoiOzs7QUFDQSxJQUFBQSxzQkFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBQyx1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